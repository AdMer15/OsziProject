
Oszilocop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000424c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080043d8  080043d8  000053d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004420  08004420  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004420  08004420  00005420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004428  08004428  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004428  08004428  00005428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800442c  0800442c  0000542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004430  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  0800443c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  0800443c  00006160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e585  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c4  00000000  00000000  000145c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00016988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093a  00000000  00000000  000175b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002113e  00000000  00000000  00017eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f79c  00000000  00000000  00039028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbd45  00000000  00000000  000487c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114509  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a0  00000000  00000000  0011454c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001175ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080043c0 	.word	0x080043c0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080043c0 	.word	0x080043c0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	463b      	mov	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
 80004d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d2:	4b3e      	ldr	r3, [pc, #248]	@ (80005cc <MX_ADC1_Init+0x110>)
 80004d4:	4a3e      	ldr	r2, [pc, #248]	@ (80005d0 <MX_ADC1_Init+0x114>)
 80004d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004d8:	4b3c      	ldr	r3, [pc, #240]	@ (80005cc <MX_ADC1_Init+0x110>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004de:	4b3b      	ldr	r3, [pc, #236]	@ (80005cc <MX_ADC1_Init+0x110>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e4:	4b39      	ldr	r3, [pc, #228]	@ (80005cc <MX_ADC1_Init+0x110>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004ea:	4b38      	ldr	r3, [pc, #224]	@ (80005cc <MX_ADC1_Init+0x110>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004f0:	4b36      	ldr	r3, [pc, #216]	@ (80005cc <MX_ADC1_Init+0x110>)
 80004f2:	2208      	movs	r2, #8
 80004f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f6:	4b35      	ldr	r3, [pc, #212]	@ (80005cc <MX_ADC1_Init+0x110>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004fc:	4b33      	ldr	r3, [pc, #204]	@ (80005cc <MX_ADC1_Init+0x110>)
 80004fe:	2201      	movs	r2, #1
 8000500:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000502:	4b32      	ldr	r3, [pc, #200]	@ (80005cc <MX_ADC1_Init+0x110>)
 8000504:	2204      	movs	r2, #4
 8000506:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000508:	4b30      	ldr	r3, [pc, #192]	@ (80005cc <MX_ADC1_Init+0x110>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b2e      	ldr	r3, [pc, #184]	@ (80005cc <MX_ADC1_Init+0x110>)
 8000512:	2200      	movs	r2, #0
 8000514:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b2d      	ldr	r3, [pc, #180]	@ (80005cc <MX_ADC1_Init+0x110>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800051c:	4b2b      	ldr	r3, [pc, #172]	@ (80005cc <MX_ADC1_Init+0x110>)
 800051e:	2201      	movs	r2, #1
 8000520:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000524:	4b29      	ldr	r3, [pc, #164]	@ (80005cc <MX_ADC1_Init+0x110>)
 8000526:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800052a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800052c:	4b27      	ldr	r3, [pc, #156]	@ (80005cc <MX_ADC1_Init+0x110>)
 800052e:	2200      	movs	r2, #0
 8000530:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000534:	4825      	ldr	r0, [pc, #148]	@ (80005cc <MX_ADC1_Init+0x110>)
 8000536:	f000 fd71 	bl	800101c <HAL_ADC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000540:	f000 f9d2 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000544:	4b23      	ldr	r3, [pc, #140]	@ (80005d4 <MX_ADC1_Init+0x118>)
 8000546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000548:	2306      	movs	r3, #6
 800054a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000550:	237f      	movs	r3, #127	@ 0x7f
 8000552:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000554:	2304      	movs	r3, #4
 8000556:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	481a      	ldr	r0, [pc, #104]	@ (80005cc <MX_ADC1_Init+0x110>)
 8000562:	f000 ff3f 	bl	80013e4 <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800056c:	f000 f9bc 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000570:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <MX_ADC1_Init+0x11c>)
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000574:	230c      	movs	r3, #12
 8000576:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	4619      	mov	r1, r3
 800057c:	4813      	ldr	r0, [pc, #76]	@ (80005cc <MX_ADC1_Init+0x110>)
 800057e:	f000 ff31 	bl	80013e4 <HAL_ADC_ConfigChannel>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000588:	f000 f9ae 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <MX_ADC1_Init+0x120>)
 800058e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000590:	2312      	movs	r3, #18
 8000592:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000594:	463b      	mov	r3, r7
 8000596:	4619      	mov	r1, r3
 8000598:	480c      	ldr	r0, [pc, #48]	@ (80005cc <MX_ADC1_Init+0x110>)
 800059a:	f000 ff23 	bl	80013e4 <HAL_ADC_ConfigChannel>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80005a4:	f000 f9a0 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005a8:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <MX_ADC1_Init+0x124>)
 80005aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005ac:	2318      	movs	r3, #24
 80005ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	4619      	mov	r1, r3
 80005b4:	4805      	ldr	r0, [pc, #20]	@ (80005cc <MX_ADC1_Init+0x110>)
 80005b6:	f000 ff15 	bl	80013e4 <HAL_ADC_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80005c0:	f000 f992 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000028 	.word	0x20000028
 80005d0:	50040000 	.word	0x50040000
 80005d4:	14f00020 	.word	0x14f00020
 80005d8:	19200040 	.word	0x19200040
 80005dc:	21800100 	.word	0x21800100
 80005e0:	25b00200 	.word	0x25b00200

080005e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	@ 0x78
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	2254      	movs	r2, #84	@ 0x54
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 feae 	bl	8004366 <memset>
  if(adcHandle->Instance==ADC1)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a3b      	ldr	r2, [pc, #236]	@ (80006fc <HAL_ADC_MspInit+0x118>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d16f      	bne.n	80006f4 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000614:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000618:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800061a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800061e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000620:	2301      	movs	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000628:	2310      	movs	r3, #16
 800062a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800062c:	2307      	movs	r3, #7
 800062e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000638:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800063c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4618      	mov	r0, r3
 8000644:	f002 ff02 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800064e:	f000 f94b 	bl	80008e8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000652:	4b2b      	ldr	r3, [pc, #172]	@ (8000700 <HAL_ADC_MspInit+0x11c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	4a2a      	ldr	r2, [pc, #168]	@ (8000700 <HAL_ADC_MspInit+0x11c>)
 8000658:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800065c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065e:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <HAL_ADC_MspInit+0x11c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <HAL_ADC_MspInit+0x11c>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4a24      	ldr	r2, [pc, #144]	@ (8000700 <HAL_ADC_MspInit+0x11c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <HAL_ADC_MspInit+0x11c>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000682:	231b      	movs	r3, #27
 8000684:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000686:	230b      	movs	r3, #11
 8000688:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f001 feaa 	bl	80023f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800069c:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 800069e:	4a1a      	ldr	r2, [pc, #104]	@ (8000708 <HAL_ADC_MspInit+0x124>)
 80006a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006a2:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006b6:	2280      	movs	r2, #128	@ 0x80
 80006b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006cc:	2220      	movs	r2, #32
 80006ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d8:	480a      	ldr	r0, [pc, #40]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006da:	f001 fc91 	bl	8002000 <HAL_DMA_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 80006e4:	f000 f900 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a06      	ldr	r2, [pc, #24]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006ee:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <HAL_ADC_MspInit+0x120>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f4:	bf00      	nop
 80006f6:	3778      	adds	r7, #120	@ 0x78
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	50040000 	.word	0x50040000
 8000700:	40021000 	.word	0x40021000
 8000704:	2000008c 	.word	0x2000008c
 8000708:	40020008 	.word	0x40020008

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_DMA_Init+0x38>)
 8000714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <MX_DMA_Init+0x38>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6493      	str	r3, [r2, #72]	@ 0x48
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_DMA_Init+0x38>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	200b      	movs	r0, #11
 8000730:	f001 fc2f 	bl	8001f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000734:	200b      	movs	r0, #11
 8000736:	f001 fc48 	bl	8001fca <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a1c      	ldr	r2, [pc, #112]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a16      	ldr	r2, [pc, #88]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_GPIO_Init+0x8c>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <MX_GPIO_Init+0x90>)
 80007ac:	f001 ff8a 	bl	80026c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007b0:	2308      	movs	r3, #8
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_GPIO_Init+0x90>)
 80007c8:	f001 fe12 	bl	80023f0 <HAL_GPIO_Init>

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000400 	.word	0x48000400

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 f9ba 	bl	8000b5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f81d 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f7ff ffad 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ee:	f7ff ff8d 	bl	800070c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007f2:	f000 f8ef 	bl	80009d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80007f6:	f7ff fe61 	bl	80004bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  uint16_t adcBuffer[4];     // vier Kanäle (PA0, PA1, PA3, PA4)

  // ADC + DMA starten
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, 4);
 80007fa:	463b      	mov	r3, r7
 80007fc:	2204      	movs	r2, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4807      	ldr	r0, [pc, #28]	@ (8000820 <main+0x44>)
 8000802:	f000 fd4d 	bl	80012a0 <HAL_ADC_Start_DMA>
      // adcBuffer[1] -> Kanal 6 (PA1)
      // adcBuffer[2] -> Kanal 8 (PA3)
      // adcBuffer[3] -> Kanal 9 (PA4)

      // Beispiel: Mittelwert berechnen oder Debug-Ausgabe
      uint16_t ch1 = adcBuffer[0];
 8000806:	883b      	ldrh	r3, [r7, #0]
 8000808:	81fb      	strh	r3, [r7, #14]
      uint16_t ch2 = adcBuffer[1];
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	81bb      	strh	r3, [r7, #12]
      uint16_t ch3 = adcBuffer[2];
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	817b      	strh	r3, [r7, #10]
      uint16_t ch4 = adcBuffer[3];
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	813b      	strh	r3, [r7, #8]

      HAL_Delay(10); // nur, um die CPU nicht zu 100 % zu belasten
 8000816:	200a      	movs	r0, #10
 8000818:	f000 fa14 	bl	8000c44 <HAL_Delay>
  {
 800081c:	bf00      	nop
 800081e:	e7f2      	b.n	8000806 <main+0x2a>
 8000820:	20000028 	.word	0x20000028

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b096      	sub	sp, #88	@ 0x58
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2244      	movs	r2, #68	@ 0x44
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fd97 	bl	8004366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	463b      	mov	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000846:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800084a:	f001 ff71 	bl	8002730 <HAL_PWREx_ControlVoltageScaling>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000854:	f000 f848 	bl	80008e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000858:	f001 ff4c 	bl	80026f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <SystemClock_Config+0xc0>)
 800085e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000862:	4a20      	ldr	r2, [pc, #128]	@ (80008e4 <SystemClock_Config+0xc0>)
 8000864:	f023 0318 	bic.w	r3, r3, #24
 8000868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800086c:	2314      	movs	r3, #20
 800086e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800087c:	2360      	movs	r3, #96	@ 0x60
 800087e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000884:	2301      	movs	r3, #1
 8000886:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800088c:	2310      	movs	r3, #16
 800088e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000890:	2307      	movs	r3, #7
 8000892:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 ff9b 	bl	80027dc <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f81c 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2303      	movs	r3, #3
 80008b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	2101      	movs	r1, #1
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fb9b 	bl	8003004 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008d4:	f000 f808 	bl	80008e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008d8:	f002 ffae 	bl	8003838 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008dc:	bf00      	nop
 80008de:	3758      	adds	r7, #88	@ 0x58
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	@ 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	@ 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000992:	f000 f937 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <DMA1_Channel1_IRQHandler+0x10>)
 80009a2:	f001 fc45 	bl	8002230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000008c 	.word	0x2000008c

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <MX_USART2_UART_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a18:	f003 f810 	bl	8003a3c <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a22:	f7ff ff61 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000d4 	.word	0x200000d4
 8000a30:	40004400 	.word	0x40004400

08000a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09e      	sub	sp, #120	@ 0x78
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2254      	movs	r2, #84	@ 0x54
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 fc86 	bl	8004366 <memset>
  if(uartHandle->Instance==USART2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <HAL_UART_MspInit+0xcc>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d148      	bne.n	8000af6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fceb 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a7c:	f7ff ff34 	bl	80008e8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a80:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <HAL_UART_MspInit+0xd0>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a84:	4a1f      	ldr	r2, [pc, #124]	@ (8000b04 <HAL_UART_MspInit+0xd0>)
 8000a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <HAL_UART_MspInit+0xd0>)
 8000a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <HAL_UART_MspInit+0xd0>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9c:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <HAL_UART_MspInit+0xd0>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <HAL_UART_MspInit+0xd0>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ace:	f001 fc8f 	bl	80023f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ad6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f001 fc7d 	bl	80023f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000af6:	bf00      	nop
 8000af8:	3778      	adds	r7, #120	@ 0x78
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40021000 	.word	0x40021000

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0c:	f7ff ff50 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	@ (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	@ (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f003 fc1f 	bl	8004378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fe4f 	bl	80007dc <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b4c:	08004430 	.word	0x08004430
  ldr r2, =_sbss
 8000b50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b54:	20000160 	.word	0x20000160

08000b58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_IRQHandler>

08000b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f001 fa09 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f80e 	bl	8000b8c <HAL_InitTick>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	e001      	b.n	8000b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b7c:	f7ff feba 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b98:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <HAL_InitTick+0x6c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d023      	beq.n	8000be8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba0:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <HAL_InitTick+0x70>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fa15 	bl	8001fe6 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d10f      	bne.n	8000be2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d809      	bhi.n	8000bdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f001 f9df 	bl	8001f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_InitTick+0x74>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	e007      	b.n	8000bec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e004      	b.n	8000bec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e001      	b.n	8000bec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	2000015c 	.word	0x2000015c

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	2000015c 	.word	0x2000015c

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff ffee 	bl	8000c2c <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffde 	bl	8000c2c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008

08000c8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	609a      	str	r2, [r3, #8]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3360      	adds	r3, #96	@ 0x60
 8000d06:	461a      	mov	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <LL_ADC_SetOffset+0x44>)
 8000d16:	4013      	ands	r3, r2
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	4313      	orrs	r3, r2
 8000d24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d2c:	bf00      	nop
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	03fff000 	.word	0x03fff000

08000d3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3360      	adds	r3, #96	@ 0x60
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3360      	adds	r3, #96	@ 0x60
 8000d78:	461a      	mov	r2, r3
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3330      	adds	r3, #48	@ 0x30
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	4413      	add	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	211f      	movs	r1, #31
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	401a      	ands	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	0e9b      	lsrs	r3, r3, #26
 8000dfc:	f003 011f 	and.w	r1, r3, #31
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	f003 031f 	and.w	r3, r3, #31
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e10:	bf00      	nop
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3314      	adds	r3, #20
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	0e5b      	lsrs	r3, r3, #25
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	4413      	add	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	0d1b      	lsrs	r3, r3, #20
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	2107      	movs	r1, #7
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	401a      	ands	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	0d1b      	lsrs	r3, r3, #20
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	431a      	orrs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e66:	bf00      	nop
 8000e68:	371c      	adds	r7, #28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	401a      	ands	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0318 	and.w	r3, r3, #24
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e98:	40d9      	lsrs	r1, r3
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	0007ffff 	.word	0x0007ffff

08000ebc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000ecc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	6093      	str	r3, [r2, #8]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ef4:	d101      	bne.n	8000efa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f44:	d101      	bne.n	8000f4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f6c:	f043 0201 	orr.w	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <LL_ADC_IsEnabled+0x18>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <LL_ADC_IsEnabled+0x1a>
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fb6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fba:	f043 0204 	orr.w	r2, r3, #4
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d101      	bne.n	8000fe6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	2b08      	cmp	r3, #8
 8001006:	d101      	bne.n	800100c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e126      	b.n	8001284 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001040:	2b00      	cmp	r3, #0
 8001042:	d109      	bne.n	8001058 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff facd 	bl	80005e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff3f 	bl	8000ee0 <LL_ADC_IsDeepPowerDownEnabled>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff25 	bl	8000ebc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff5a 	bl	8000f30 <LL_ADC_IsInternalRegulatorEnabled>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d115      	bne.n	80010ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff3e 	bl	8000f08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800108c:	4b7f      	ldr	r3, [pc, #508]	@ (800128c <HAL_ADC_Init+0x270>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	099b      	lsrs	r3, r3, #6
 8001092:	4a7f      	ldr	r2, [pc, #508]	@ (8001290 <HAL_ADC_Init+0x274>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	099b      	lsrs	r3, r3, #6
 800109a:	3301      	adds	r3, #1
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010a0:	e002      	b.n	80010a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f9      	bne.n	80010a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff3c 	bl	8000f30 <LL_ADC_IsInternalRegulatorEnabled>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10d      	bne.n	80010da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c2:	f043 0210 	orr.w	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff75 	bl	8000fce <LL_ADC_REG_IsConversionOngoing>
 80010e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 80bf 	bne.w	8001272 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 80bb 	bne.w	8001272 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001100:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001104:	f043 0202 	orr.w	r2, r3, #2
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff35 	bl	8000f80 <LL_ADC_IsEnabled>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10b      	bne.n	8001134 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800111c:	485d      	ldr	r0, [pc, #372]	@ (8001294 <HAL_ADC_Init+0x278>)
 800111e:	f7ff ff2f 	bl	8000f80 <LL_ADC_IsEnabled>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d105      	bne.n	8001134 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4619      	mov	r1, r3
 800112e:	485a      	ldr	r0, [pc, #360]	@ (8001298 <HAL_ADC_Init+0x27c>)
 8001130:	f7ff fdac 	bl	8000c8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e5b      	ldrb	r3, [r3, #25]
 8001138:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800113e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001144:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800114a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001152:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d106      	bne.n	8001170 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001166:	3b01      	subs	r3, #1
 8001168:	045b      	lsls	r3, r3, #17
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	2b00      	cmp	r3, #0
 8001176:	d009      	beq.n	800118c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001184:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	4b42      	ldr	r3, [pc, #264]	@ (800129c <HAL_ADC_Init+0x280>)
 8001194:	4013      	ands	r3, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	69b9      	ldr	r1, [r7, #24]
 800119c:	430b      	orrs	r3, r1
 800119e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff25 	bl	8000ff4 <LL_ADC_INJ_IsConversionOngoing>
 80011aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d13d      	bne.n	800122e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d13a      	bne.n	800122e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011bc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011c4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011d4:	f023 0302 	bic.w	r3, r3, #2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	69b9      	ldr	r1, [r7, #24]
 80011de:	430b      	orrs	r3, r1
 80011e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d118      	bne.n	800121e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80011f6:	f023 0304 	bic.w	r3, r3, #4
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001202:	4311      	orrs	r1, r2
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001208:	4311      	orrs	r1, r2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800120e:	430a      	orrs	r2, r1
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0201 	orr.w	r2, r2, #1
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	e007      	b.n	800122e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0201 	bic.w	r2, r2, #1
 800122c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10c      	bne.n	8001250 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123c:	f023 010f 	bic.w	r1, r3, #15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	631a      	str	r2, [r3, #48]	@ 0x30
 800124e:	e007      	b.n	8001260 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 020f 	bic.w	r2, r2, #15
 800125e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001264:	f023 0303 	bic.w	r3, r3, #3
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001270:	e007      	b.n	8001282 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001276:	f043 0210 	orr.w	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001282:	7ffb      	ldrb	r3, [r7, #31]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	053e2d63 	.word	0x053e2d63
 8001294:	50040000 	.word	0x50040000
 8001298:	50040300 	.word	0x50040300
 800129c:	fff0c007 	.word	0xfff0c007

080012a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fe8c 	bl	8000fce <LL_ADC_REG_IsConversionOngoing>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d167      	bne.n	800138c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Start_DMA+0x2a>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e063      	b.n	8001392 <HAL_ADC_Start_DMA+0xf2>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 fc68 	bl	8001ba8 <ADC_Enable>
 80012d8:	4603      	mov	r3, r0
 80012da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d14f      	bne.n	8001382 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001306:	f023 0206 	bic.w	r2, r3, #6
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	659a      	str	r2, [r3, #88]	@ 0x58
 800130e:	e002      	b.n	8001316 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	4a20      	ldr	r2, [pc, #128]	@ (800139c <HAL_ADC_Start_DMA+0xfc>)
 800131c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	4a1f      	ldr	r2, [pc, #124]	@ (80013a0 <HAL_ADC_Start_DMA+0x100>)
 8001324:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <HAL_ADC_Start_DMA+0x104>)
 800132c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	221c      	movs	r2, #28
 8001334:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0210 	orr.w	r2, r2, #16
 800134c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f042 0201 	orr.w	r2, r2, #1
 800135c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3340      	adds	r3, #64	@ 0x40
 8001368:	4619      	mov	r1, r3
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f000 feff 	bl	8002170 <HAL_DMA_Start_IT>
 8001372:	4603      	mov	r3, r0
 8001374:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fe13 	bl	8000fa6 <LL_ADC_REG_StartConversion>
 8001380:	e006      	b.n	8001390 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800138a:	e001      	b.n	8001390 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800138c:	2302      	movs	r3, #2
 800138e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001390:	7dfb      	ldrb	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	08001cb5 	.word	0x08001cb5
 80013a0:	08001d8d 	.word	0x08001d8d
 80013a4:	08001da9 	.word	0x08001da9

080013a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0b6      	sub	sp, #216	@ 0xd8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x22>
 8001402:	2302      	movs	r3, #2
 8001404:	e3bb      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x79a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fddb 	bl	8000fce <LL_ADC_REG_IsConversionOngoing>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 83a0 	bne.w	8001b60 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b05      	cmp	r3, #5
 800142e:	d824      	bhi.n	800147a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	3b02      	subs	r3, #2
 8001436:	2b03      	cmp	r3, #3
 8001438:	d81b      	bhi.n	8001472 <HAL_ADC_ConfigChannel+0x8e>
 800143a:	a201      	add	r2, pc, #4	@ (adr r2, 8001440 <HAL_ADC_ConfigChannel+0x5c>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001451 	.word	0x08001451
 8001444:	08001459 	.word	0x08001459
 8001448:	08001461 	.word	0x08001461
 800144c:	08001469 	.word	0x08001469
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001450:	230c      	movs	r3, #12
 8001452:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001456:	e010      	b.n	800147a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001458:	2312      	movs	r3, #18
 800145a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800145e:	e00c      	b.n	800147a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001460:	2318      	movs	r3, #24
 8001462:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001466:	e008      	b.n	800147a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001468:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800146c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001470:	e003      	b.n	800147a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001472:	2306      	movs	r3, #6
 8001474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001478:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001488:	f7ff fc9c 	bl	8000dc4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fd9c 	bl	8000fce <LL_ADC_REG_IsConversionOngoing>
 8001496:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fda8 	bl	8000ff4 <LL_ADC_INJ_IsConversionOngoing>
 80014a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 81a4 	bne.w	80017fa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f040 819f 	bne.w	80017fa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	461a      	mov	r2, r3
 80014ca:	f7ff fca7 	bl	8000e1c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d00a      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6919      	ldr	r1, [r3, #16]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001500:	f7ff fbf8 	bl	8000cf4 <LL_ADC_SetOffset>
 8001504:	e179      	b.n	80017fa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fc15 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10a      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x14e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc0a 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	0e9b      	lsrs	r3, r3, #26
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	e01e      	b.n	8001570 <HAL_ADC_ConfigChannel+0x18c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fbff 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001554:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001558:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001560:	2320      	movs	r3, #32
 8001562:	e004      	b.n	800156e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001564:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001568:	fab3 f383 	clz	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1a4>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0e9b      	lsrs	r3, r3, #26
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	e018      	b.n	80015ba <HAL_ADC_ConfigChannel+0x1d6>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800159c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80015a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80015ac:	2320      	movs	r3, #32
 80015ae:	e004      	b.n	80015ba <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80015b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d106      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fbce 	bl	8000d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fbb2 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10a      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x214>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2101      	movs	r1, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fba7 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	0e9b      	lsrs	r3, r3, #26
 80015f2:	f003 021f 	and.w	r2, r3, #31
 80015f6:	e01e      	b.n	8001636 <HAL_ADC_ConfigChannel+0x252>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb9c 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001616:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800161a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800161e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001626:	2320      	movs	r3, #32
 8001628:	e004      	b.n	8001634 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800162a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163e:	2b00      	cmp	r3, #0
 8001640:	d105      	bne.n	800164e <HAL_ADC_ConfigChannel+0x26a>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0e9b      	lsrs	r3, r3, #26
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	e018      	b.n	8001680 <HAL_ADC_ConfigChannel+0x29c>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001662:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001666:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800166a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001672:	2320      	movs	r3, #32
 8001674:	e004      	b.n	8001680 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001676:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001680:	429a      	cmp	r2, r3
 8001682:	d106      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2200      	movs	r2, #0
 800168a:	2101      	movs	r1, #1
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fb6b 	bl	8000d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2102      	movs	r1, #2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fb4f 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10a      	bne.n	80016be <HAL_ADC_ConfigChannel+0x2da>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb44 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	0e9b      	lsrs	r3, r3, #26
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	e01e      	b.n	80016fc <HAL_ADC_ConfigChannel+0x318>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2102      	movs	r1, #2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fb39 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016d4:	fa93 f3a3 	rbit	r3, r3
 80016d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80016dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80016e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80016ec:	2320      	movs	r3, #32
 80016ee:	e004      	b.n	80016fa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80016f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x330>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	0e9b      	lsrs	r3, r3, #26
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	e014      	b.n	800173e <HAL_ADC_ConfigChannel+0x35a>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001724:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001728:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001730:	2320      	movs	r3, #32
 8001732:	e004      	b.n	800173e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001734:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800173e:	429a      	cmp	r2, r3
 8001740:	d106      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	2102      	movs	r1, #2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fb0c 	bl	8000d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2103      	movs	r1, #3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff faf0 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10a      	bne.n	800177c <HAL_ADC_ConfigChannel+0x398>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2103      	movs	r1, #3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fae5 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	0e9b      	lsrs	r3, r3, #26
 8001776:	f003 021f 	and.w	r2, r3, #31
 800177a:	e017      	b.n	80017ac <HAL_ADC_ConfigChannel+0x3c8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2103      	movs	r1, #3
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fada 	bl	8000d3c <LL_ADC_GetOffsetChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001796:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800179e:	2320      	movs	r3, #32
 80017a0:	e003      	b.n	80017aa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80017a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x3e0>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0e9b      	lsrs	r3, r3, #26
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	e011      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x404>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80017d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80017d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80017dc:	2320      	movs	r3, #32
 80017de:	e003      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80017e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d106      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2200      	movs	r2, #0
 80017f2:	2103      	movs	r1, #3
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fab7 	bl	8000d68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fbbe 	bl	8000f80 <LL_ADC_IsEnabled>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 8140 	bne.w	8001a8c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	461a      	mov	r2, r3
 800181a:	f7ff fb2b 	bl	8000e74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	4a8f      	ldr	r2, [pc, #572]	@ (8001a60 <HAL_ADC_ConfigChannel+0x67c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	f040 8131 	bne.w	8001a8c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10b      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x46e>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0e9b      	lsrs	r3, r3, #26
 8001840:	3301      	adds	r3, #1
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2b09      	cmp	r3, #9
 8001848:	bf94      	ite	ls
 800184a:	2301      	movls	r3, #1
 800184c:	2300      	movhi	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	e019      	b.n	8001886 <HAL_ADC_ConfigChannel+0x4a2>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001862:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001864:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800186a:	2320      	movs	r3, #32
 800186c:	e003      	b.n	8001876 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800186e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	2b09      	cmp	r3, #9
 800187e:	bf94      	ite	ls
 8001880:	2301      	movls	r3, #1
 8001882:	2300      	movhi	r3, #0
 8001884:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001886:	2b00      	cmp	r3, #0
 8001888:	d079      	beq.n	800197e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x4c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0e9b      	lsrs	r3, r3, #26
 800189c:	3301      	adds	r3, #1
 800189e:	069b      	lsls	r3, r3, #26
 80018a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018a4:	e015      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x4ee>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80018b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018b6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80018b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80018be:	2320      	movs	r3, #32
 80018c0:	e003      	b.n	80018ca <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80018c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	069b      	lsls	r3, r3, #26
 80018ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x50e>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	0e9b      	lsrs	r3, r3, #26
 80018e4:	3301      	adds	r3, #1
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2101      	movs	r1, #1
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	e017      	b.n	8001922 <HAL_ADC_ConfigChannel+0x53e>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001902:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800190a:	2320      	movs	r3, #32
 800190c:	e003      	b.n	8001916 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800190e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	3301      	adds	r3, #1
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	ea42 0103 	orr.w	r1, r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10a      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x564>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0e9b      	lsrs	r3, r3, #26
 8001938:	3301      	adds	r3, #1
 800193a:	f003 021f 	and.w	r2, r3, #31
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	051b      	lsls	r3, r3, #20
 8001946:	e018      	b.n	800197a <HAL_ADC_ConfigChannel+0x596>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001958:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800195a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001960:	2320      	movs	r3, #32
 8001962:	e003      	b.n	800196c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	f003 021f 	and.w	r2, r3, #31
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800197a:	430b      	orrs	r3, r1
 800197c:	e081      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001986:	2b00      	cmp	r3, #0
 8001988:	d107      	bne.n	800199a <HAL_ADC_ConfigChannel+0x5b6>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0e9b      	lsrs	r3, r3, #26
 8001990:	3301      	adds	r3, #1
 8001992:	069b      	lsls	r3, r3, #26
 8001994:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001998:	e015      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x5e2>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80019ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80019b2:	2320      	movs	r3, #32
 80019b4:	e003      	b.n	80019be <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80019b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	069b      	lsls	r3, r3, #26
 80019c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x602>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0e9b      	lsrs	r3, r3, #26
 80019d8:	3301      	adds	r3, #1
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	e017      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x632>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	61bb      	str	r3, [r7, #24]
  return result;
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80019fe:	2320      	movs	r3, #32
 8001a00:	e003      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	ea42 0103 	orr.w	r1, r2, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10d      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x65e>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0e9b      	lsrs	r3, r3, #26
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f003 021f 	and.w	r2, r3, #31
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	3b1e      	subs	r3, #30
 8001a3a:	051b      	lsls	r3, r3, #20
 8001a3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	e01e      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x69c>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	60fb      	str	r3, [r7, #12]
  return result;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d104      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	e006      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x688>
 8001a5e:	bf00      	nop
 8001a60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f003 021f 	and.w	r2, r3, #31
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	3b1e      	subs	r3, #30
 8001a7a:	051b      	lsls	r3, r3, #20
 8001a7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f9c8 	bl	8000e1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <HAL_ADC_ConfigChannel+0x7a4>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d06c      	beq.n	8001b72 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a98:	483c      	ldr	r0, [pc, #240]	@ (8001b8c <HAL_ADC_ConfigChannel+0x7a8>)
 8001a9a:	f7ff f91d 	bl	8000cd8 <LL_ADC_GetCommonPathInternalCh>
 8001a9e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a3a      	ldr	r2, [pc, #232]	@ (8001b90 <HAL_ADC_ConfigChannel+0x7ac>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d127      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001aac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ab0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d121      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a35      	ldr	r2, [pc, #212]	@ (8001b94 <HAL_ADC_ConfigChannel+0x7b0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d157      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ac6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001aca:	4619      	mov	r1, r3
 8001acc:	482f      	ldr	r0, [pc, #188]	@ (8001b8c <HAL_ADC_ConfigChannel+0x7a8>)
 8001ace:	f7ff f8f0 	bl	8000cb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad2:	4b31      	ldr	r3, [pc, #196]	@ (8001b98 <HAL_ADC_ConfigChannel+0x7b4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	4a30      	ldr	r2, [pc, #192]	@ (8001b9c <HAL_ADC_ConfigChannel+0x7b8>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001aec:	e002      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f9      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001afa:	e03a      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a27      	ldr	r2, [pc, #156]	@ (8001ba0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d113      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1f      	ldr	r2, [pc, #124]	@ (8001b94 <HAL_ADC_ConfigChannel+0x7b0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d12a      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b24:	4619      	mov	r1, r3
 8001b26:	4819      	ldr	r0, [pc, #100]	@ (8001b8c <HAL_ADC_ConfigChannel+0x7a8>)
 8001b28:	f7ff f8c3 	bl	8000cb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b2c:	e021      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d11c      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d116      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <HAL_ADC_ConfigChannel+0x7b0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d111      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <HAL_ADC_ConfigChannel+0x7a8>)
 8001b5a:	f7ff f8aa 	bl	8000cb2 <LL_ADC_SetCommonPathInternalCh>
 8001b5e:	e008      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	37d8      	adds	r7, #216	@ 0xd8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	80080000 	.word	0x80080000
 8001b8c:	50040300 	.word	0x50040300
 8001b90:	c7520000 	.word	0xc7520000
 8001b94:	50040000 	.word	0x50040000
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	053e2d63 	.word	0x053e2d63
 8001ba0:	cb840000 	.word	0xcb840000
 8001ba4:	80000001 	.word	0x80000001

08001ba8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f9e1 	bl	8000f80 <LL_ADC_IsEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d169      	bne.n	8001c98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <ADC_Enable+0xfc>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e055      	b.n	8001c9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f9b0 	bl	8000f58 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001bf8:	482b      	ldr	r0, [pc, #172]	@ (8001ca8 <ADC_Enable+0x100>)
 8001bfa:	f7ff f86d 	bl	8000cd8 <LL_ADC_GetCommonPathInternalCh>
 8001bfe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c08:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <ADC_Enable+0x104>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	099b      	lsrs	r3, r3, #6
 8001c0e:	4a28      	ldr	r2, [pc, #160]	@ (8001cb0 <ADC_Enable+0x108>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	099b      	lsrs	r3, r3, #6
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c22:	e002      	b.n	8001c2a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f9      	bne.n	8001c24 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c30:	f7fe fffc 	bl	8000c2c <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c36:	e028      	b.n	8001c8a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f99f 	bl	8000f80 <LL_ADC_IsEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d104      	bne.n	8001c52 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f983 	bl	8000f58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c52:	f7fe ffeb 	bl	8000c2c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d914      	bls.n	8001c8a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d00d      	beq.n	8001c8a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e007      	b.n	8001c9a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d1cf      	bne.n	8001c38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	8000003f 	.word	0x8000003f
 8001ca8:	50040300 	.word	0x50040300
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	053e2d63 	.word	0x053e2d63

08001cb4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d14b      	bne.n	8001d66 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d021      	beq.n	8001d2c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f856 	bl	8000d9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d032      	beq.n	8001d5e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d12b      	bne.n	8001d5e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d11f      	bne.n	8001d5e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d2a:	e018      	b.n	8001d5e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d111      	bne.n	8001d5e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7ff fb22 	bl	80013a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d64:	e00e      	b.n	8001d84 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7ff fb2c 	bl	80013d0 <HAL_ADC_ErrorCallback>
}
 8001d78:	e004      	b.n	8001d84 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f7ff fb0e 	bl	80013bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	f043 0204 	orr.w	r2, r3, #4
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff fafe 	bl	80013d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4907      	ldr	r1, [pc, #28]	@ (8001e78 <__NVIC_EnableIRQ+0x38>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	@ (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	@ (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	@ 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	@ 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff8e 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff29 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff3e 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff8e 	bl	8001ed0 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5d 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff31 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffa2 	bl	8001f38 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e098      	b.n	8002144 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	4b4d      	ldr	r3, [pc, #308]	@ (8002150 <HAL_DMA_Init+0x150>)
 800201a:	429a      	cmp	r2, r3
 800201c:	d80f      	bhi.n	800203e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	4b4b      	ldr	r3, [pc, #300]	@ (8002154 <HAL_DMA_Init+0x154>)
 8002026:	4413      	add	r3, r2
 8002028:	4a4b      	ldr	r2, [pc, #300]	@ (8002158 <HAL_DMA_Init+0x158>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	009a      	lsls	r2, r3, #2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a48      	ldr	r2, [pc, #288]	@ (800215c <HAL_DMA_Init+0x15c>)
 800203a:	641a      	str	r2, [r3, #64]	@ 0x40
 800203c:	e00e      	b.n	800205c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	4b46      	ldr	r3, [pc, #280]	@ (8002160 <HAL_DMA_Init+0x160>)
 8002046:	4413      	add	r3, r2
 8002048:	4a43      	ldr	r2, [pc, #268]	@ (8002158 <HAL_DMA_Init+0x158>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	009a      	lsls	r2, r3, #2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a42      	ldr	r2, [pc, #264]	@ (8002164 <HAL_DMA_Init+0x164>)
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002076:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020b6:	d039      	beq.n	800212c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	4a27      	ldr	r2, [pc, #156]	@ (800215c <HAL_DMA_Init+0x15c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d11a      	bne.n	80020f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020c2:	4b29      	ldr	r3, [pc, #164]	@ (8002168 <HAL_DMA_Init+0x168>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	f003 031c 	and.w	r3, r3, #28
 80020ce:	210f      	movs	r1, #15
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4924      	ldr	r1, [pc, #144]	@ (8002168 <HAL_DMA_Init+0x168>)
 80020d8:	4013      	ands	r3, r2
 80020da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020dc:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <HAL_DMA_Init+0x168>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e8:	f003 031c 	and.w	r3, r3, #28
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	491d      	ldr	r1, [pc, #116]	@ (8002168 <HAL_DMA_Init+0x168>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
 80020f6:	e019      	b.n	800212c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020f8:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <HAL_DMA_Init+0x16c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002100:	f003 031c 	and.w	r3, r3, #28
 8002104:	210f      	movs	r1, #15
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	4917      	ldr	r1, [pc, #92]	@ (800216c <HAL_DMA_Init+0x16c>)
 800210e:	4013      	ands	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_DMA_Init+0x16c>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f003 031c 	and.w	r3, r3, #28
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	4911      	ldr	r1, [pc, #68]	@ (800216c <HAL_DMA_Init+0x16c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40020407 	.word	0x40020407
 8002154:	bffdfff8 	.word	0xbffdfff8
 8002158:	cccccccd 	.word	0xcccccccd
 800215c:	40020000 	.word	0x40020000
 8002160:	bffdfbf8 	.word	0xbffdfbf8
 8002164:	40020400 	.word	0x40020400
 8002168:	400200a8 	.word	0x400200a8
 800216c:	400204a8 	.word	0x400204a8

08002170 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_DMA_Start_IT+0x20>
 800218c:	2302      	movs	r3, #2
 800218e:	e04b      	b.n	8002228 <HAL_DMA_Start_IT+0xb8>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d13a      	bne.n	800221a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f8e0 	bl	800238e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 020e 	orr.w	r2, r2, #14
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e00f      	b.n	8002208 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 020a 	orr.w	r2, r2, #10
 8002206:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e005      	b.n	8002226 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002226:	7dfb      	ldrb	r3, [r7, #23]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	f003 031c 	and.w	r3, r3, #28
 8002250:	2204      	movs	r2, #4
 8002252:	409a      	lsls	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d026      	beq.n	80022aa <HAL_DMA_IRQHandler+0x7a>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d021      	beq.n	80022aa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0204 	bic.w	r2, r2, #4
 8002282:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002288:	f003 021c 	and.w	r2, r3, #28
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	2104      	movs	r1, #4
 8002292:	fa01 f202 	lsl.w	r2, r1, r2
 8002296:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	2b00      	cmp	r3, #0
 800229e:	d071      	beq.n	8002384 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80022a8:	e06c      	b.n	8002384 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ae:	f003 031c 	and.w	r3, r3, #28
 80022b2:	2202      	movs	r2, #2
 80022b4:	409a      	lsls	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d02e      	beq.n	800231c <HAL_DMA_IRQHandler+0xec>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d029      	beq.n	800231c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10b      	bne.n	80022ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 020a 	bic.w	r2, r2, #10
 80022e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f003 021c 	and.w	r2, r3, #28
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	2102      	movs	r1, #2
 80022fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002300:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d038      	beq.n	8002384 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800231a:	e033      	b.n	8002384 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002320:	f003 031c 	and.w	r3, r3, #28
 8002324:	2208      	movs	r2, #8
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d02a      	beq.n	8002386 <HAL_DMA_IRQHandler+0x156>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d025      	beq.n	8002386 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 020e 	bic.w	r2, r2, #14
 8002348:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f003 021c 	and.w	r2, r3, #28
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002384:	bf00      	nop
 8002386:	bf00      	nop
}
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a0:	f003 021c 	and.w	r2, r3, #28
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f202 	lsl.w	r2, r1, r2
 80023ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d108      	bne.n	80023d2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023d0:	e007      	b.n	80023e2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	60da      	str	r2, [r3, #12]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	e148      	b.n	8002692 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	4013      	ands	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 813a 	beq.w	800268c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d005      	beq.n	8002430 <HAL_GPIO_Init+0x40>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d130      	bne.n	8002492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002466:	2201      	movs	r2, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 0201 	and.w	r2, r3, #1
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b03      	cmp	r3, #3
 800249c:	d017      	beq.n	80024ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d123      	bne.n	8002522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	6939      	ldr	r1, [r7, #16]
 800251e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8094 	beq.w	800268c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002564:	4b52      	ldr	r3, [pc, #328]	@ (80026b0 <HAL_GPIO_Init+0x2c0>)
 8002566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002568:	4a51      	ldr	r2, [pc, #324]	@ (80026b0 <HAL_GPIO_Init+0x2c0>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002570:	4b4f      	ldr	r3, [pc, #316]	@ (80026b0 <HAL_GPIO_Init+0x2c0>)
 8002572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800257c:	4a4d      	ldr	r2, [pc, #308]	@ (80026b4 <HAL_GPIO_Init+0x2c4>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025a6:	d00d      	beq.n	80025c4 <HAL_GPIO_Init+0x1d4>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a43      	ldr	r2, [pc, #268]	@ (80026b8 <HAL_GPIO_Init+0x2c8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <HAL_GPIO_Init+0x1d0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a42      	ldr	r2, [pc, #264]	@ (80026bc <HAL_GPIO_Init+0x2cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_GPIO_Init+0x1cc>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e004      	b.n	80025c6 <HAL_GPIO_Init+0x1d6>
 80025bc:	2307      	movs	r3, #7
 80025be:	e002      	b.n	80025c6 <HAL_GPIO_Init+0x1d6>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_GPIO_Init+0x1d6>
 80025c4:	2300      	movs	r3, #0
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	f002 0203 	and.w	r2, r2, #3
 80025cc:	0092      	lsls	r2, r2, #2
 80025ce:	4093      	lsls	r3, r2
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025d6:	4937      	ldr	r1, [pc, #220]	@ (80026b4 <HAL_GPIO_Init+0x2c4>)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025e4:	4b36      	ldr	r3, [pc, #216]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002608:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800260e:	4b2c      	ldr	r3, [pc, #176]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002632:	4a23      	ldr	r2, [pc, #140]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002638:	4b21      	ldr	r3, [pc, #132]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800265c:	4a18      	ldr	r2, [pc, #96]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002662:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002686:	4a0e      	ldr	r2, [pc, #56]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	f47f aeaf 	bne.w	8002400 <HAL_GPIO_Init+0x10>
  }
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40010000 	.word	0x40010000
 80026b8:	48000400 	.word	0x48000400
 80026bc:	48000800 	.word	0x48000800
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a04      	ldr	r2, [pc, #16]	@ (8002710 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002702:	6013      	str	r3, [r2, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40007000 	.word	0x40007000

08002714 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <HAL_PWREx_GetVoltageRange+0x18>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40007000 	.word	0x40007000

08002730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800273e:	d130      	bne.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002740:	4b23      	ldr	r3, [pc, #140]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800274c:	d038      	beq.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800274e:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002756:	4a1e      	ldr	r2, [pc, #120]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002758:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800275c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800275e:	4b1d      	ldr	r3, [pc, #116]	@ (80027d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2232      	movs	r2, #50	@ 0x32
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	4a1b      	ldr	r2, [pc, #108]	@ (80027d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0c9b      	lsrs	r3, r3, #18
 8002770:	3301      	adds	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002774:	e002      	b.n	800277c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3b01      	subs	r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800277c:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002788:	d102      	bne.n	8002790 <HAL_PWREx_ControlVoltageScaling+0x60>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f2      	bne.n	8002776 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002790:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279c:	d110      	bne.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e00f      	b.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ae:	d007      	beq.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027b0:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027b8:	4a05      	ldr	r2, [pc, #20]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40007000 	.word	0x40007000
 80027d4:	20000000 	.word	0x20000000
 80027d8:	431bde83 	.word	0x431bde83

080027dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f000 bc02 	b.w	8002ff4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f0:	4b96      	ldr	r3, [pc, #600]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027fa:	4b94      	ldr	r3, [pc, #592]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80e4 	beq.w	80029da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_RCC_OscConfig+0x4c>
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	f040 808b 	bne.w	8002936 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b01      	cmp	r3, #1
 8002824:	f040 8087 	bne.w	8002936 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002828:	4b88      	ldr	r3, [pc, #544]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x64>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e3d9      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1a      	ldr	r2, [r3, #32]
 8002844:	4b81      	ldr	r3, [pc, #516]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_RCC_OscConfig+0x7e>
 8002850:	4b7e      	ldr	r3, [pc, #504]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002858:	e005      	b.n	8002866 <HAL_RCC_OscConfig+0x8a>
 800285a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 800285c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002866:	4293      	cmp	r3, r2
 8002868:	d223      	bcs.n	80028b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fd8c 	bl	800338c <RCC_SetFlashLatencyFromMSIRange>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e3ba      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800287e:	4b73      	ldr	r3, [pc, #460]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a72      	ldr	r2, [pc, #456]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b70      	ldr	r3, [pc, #448]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	496d      	ldr	r1, [pc, #436]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800289c:	4b6b      	ldr	r3, [pc, #428]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	4968      	ldr	r1, [pc, #416]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e025      	b.n	80028fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b2:	4b66      	ldr	r3, [pc, #408]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a65      	ldr	r2, [pc, #404]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b63      	ldr	r3, [pc, #396]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4960      	ldr	r1, [pc, #384]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	495b      	ldr	r1, [pc, #364]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fd4c 	bl	800338c <RCC_SetFlashLatencyFromMSIRange>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e37a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028fe:	f000 fc81 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b51      	ldr	r3, [pc, #324]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4950      	ldr	r1, [pc, #320]	@ (8002a50 <HAL_RCC_OscConfig+0x274>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	4a4e      	ldr	r2, [pc, #312]	@ (8002a54 <HAL_RCC_OscConfig+0x278>)
 800291c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800291e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a58 <HAL_RCC_OscConfig+0x27c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f932 	bl	8000b8c <HAL_InitTick>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d052      	beq.n	80029d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	e35e      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d032      	beq.n	80029a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800293e:	4b43      	ldr	r3, [pc, #268]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a42      	ldr	r2, [pc, #264]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800294a:	f7fe f96f 	bl	8000c2c <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002952:	f7fe f96b 	bl	8000c2c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e347      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002964:	4b39      	ldr	r3, [pc, #228]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002970:	4b36      	ldr	r3, [pc, #216]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a35      	ldr	r2, [pc, #212]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002976:	f043 0308 	orr.w	r3, r3, #8
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b33      	ldr	r3, [pc, #204]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4930      	ldr	r1, [pc, #192]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	492b      	ldr	r1, [pc, #172]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 80029a2:	e01a      	b.n	80029da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029a4:	4b29      	ldr	r3, [pc, #164]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a28      	ldr	r2, [pc, #160]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029b0:	f7fe f93c 	bl	8000c2c <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b8:	f7fe f938 	bl	8000c2c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e314      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ca:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1dc>
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d073      	beq.n	8002ace <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_OscConfig+0x21c>
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	d10e      	bne.n	8002a10 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d10b      	bne.n	8002a10 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d063      	beq.n	8002acc <HAL_RCC_OscConfig+0x2f0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d15f      	bne.n	8002acc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e2f1      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a18:	d106      	bne.n	8002a28 <HAL_RCC_OscConfig+0x24c>
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e025      	b.n	8002a74 <HAL_RCC_OscConfig+0x298>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a30:	d114      	bne.n	8002a5c <HAL_RCC_OscConfig+0x280>
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a05      	ldr	r2, [pc, #20]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a02      	ldr	r2, [pc, #8]	@ (8002a4c <HAL_RCC_OscConfig+0x270>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e013      	b.n	8002a74 <HAL_RCC_OscConfig+0x298>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	080043d8 	.word	0x080043d8
 8002a54:	20000000 	.word	0x20000000
 8002a58:	20000004 	.word	0x20000004
 8002a5c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a9f      	ldr	r2, [pc, #636]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b9d      	ldr	r3, [pc, #628]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe f8d6 	bl	8000c2c <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe f8d2 	bl	8000c2c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	@ 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e2ae      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a96:	4b92      	ldr	r3, [pc, #584]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2a8>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe f8c2 	bl	8000c2c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fe f8be 	bl	8000c2c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	@ 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e29a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002abe:	4b88      	ldr	r3, [pc, #544]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x2d0>
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d060      	beq.n	8002b9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_OscConfig+0x310>
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b0c      	cmp	r3, #12
 8002ae4:	d119      	bne.n	8002b1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d116      	bne.n	8002b1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aec:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_OscConfig+0x328>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e277      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b76      	ldr	r3, [pc, #472]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	4973      	ldr	r1, [pc, #460]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b18:	e040      	b.n	8002b9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d023      	beq.n	8002b6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b22:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe f87d 	bl	8000c2c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe f879 	bl	8000c2c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e255      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b48:	4b65      	ldr	r3, [pc, #404]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b62      	ldr	r3, [pc, #392]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	495f      	ldr	r1, [pc, #380]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
 8002b68:	e018      	b.n	8002b9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe f859 	bl	8000c2c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7fe f855 	bl	8000c2c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e231      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b90:	4b53      	ldr	r3, [pc, #332]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d03c      	beq.n	8002c22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01c      	beq.n	8002bea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe f834 	bl	8000c2c <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7fe f830 	bl	8000c2c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e20c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bda:	4b41      	ldr	r3, [pc, #260]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ef      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x3ec>
 8002be8:	e01b      	b.n	8002c22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fe f817 	bl	8000c2c <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c02:	f7fe f813 	bl	8000c2c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e1ef      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c14:	4b32      	ldr	r3, [pc, #200]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1ef      	bne.n	8002c02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80a6 	beq.w	8002d7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c30:	2300      	movs	r3, #0
 8002c32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c34:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10d      	bne.n	8002c5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c40:	4b27      	ldr	r3, [pc, #156]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	4a26      	ldr	r2, [pc, #152]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <HAL_RCC_OscConfig+0x508>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d118      	bne.n	8002c9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <HAL_RCC_OscConfig+0x508>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce4 <HAL_RCC_OscConfig+0x508>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c74:	f7fd ffda 	bl	8000c2c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fd ffd6 	bl	8000c2c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1b2      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <HAL_RCC_OscConfig+0x508>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d108      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4d8>
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cb2:	e029      	b.n	8002d08 <HAL_RCC_OscConfig+0x52c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d115      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x50c>
 8002cbc:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc2:	4a07      	ldr	r2, [pc, #28]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ccc:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd2:	4a03      	ldr	r2, [pc, #12]	@ (8002ce0 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cdc:	e014      	b.n	8002d08 <HAL_RCC_OscConfig+0x52c>
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	4b9a      	ldr	r3, [pc, #616]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cee:	4a99      	ldr	r2, [pc, #612]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cf8:	4b96      	ldr	r3, [pc, #600]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfe:	4a95      	ldr	r2, [pc, #596]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fd ff8c 	bl	8000c2c <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fd ff88 	bl	8000c2c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e162      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2e:	4b89      	ldr	r3, [pc, #548]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ed      	beq.n	8002d18 <HAL_RCC_OscConfig+0x53c>
 8002d3c:	e015      	b.n	8002d6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fd ff75 	bl	8000c2c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fd ff71 	bl	8000c2c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e14b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d5c:	4b7d      	ldr	r3, [pc, #500]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1ed      	bne.n	8002d46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d6a:	7ffb      	ldrb	r3, [r7, #31]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4b78      	ldr	r3, [pc, #480]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	4a77      	ldr	r2, [pc, #476]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d03c      	beq.n	8002e02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01c      	beq.n	8002dca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d90:	4b70      	ldr	r3, [pc, #448]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d96:	4a6f      	ldr	r2, [pc, #444]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fd ff44 	bl	8000c2c <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da8:	f7fd ff40 	bl	8000c2c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e11c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dba:	4b66      	ldr	r3, [pc, #408]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ef      	beq.n	8002da8 <HAL_RCC_OscConfig+0x5cc>
 8002dc8:	e01b      	b.n	8002e02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dca:	4b62      	ldr	r3, [pc, #392]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dd0:	4a60      	ldr	r2, [pc, #384]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7fd ff27 	bl	8000c2c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de2:	f7fd ff23 	bl	8000c2c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0ff      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df4:	4b57      	ldr	r3, [pc, #348]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1ef      	bne.n	8002de2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80f3 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	f040 80c9 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e16:	4b4f      	ldr	r3, [pc, #316]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0203 	and.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d12c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	3b01      	subs	r3, #1
 8002e36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d123      	bne.n	8002e84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d11b      	bne.n	8002e84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d113      	bne.n	8002e84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d109      	bne.n	8002e84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d06b      	beq.n	8002f5c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d062      	beq.n	8002f50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e8a:	4b32      	ldr	r3, [pc, #200]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0ac      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002ea0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ea4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ea6:	f7fd fec1 	bl	8000c2c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fd febd 	bl	8000c2c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e099      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec0:	4b24      	ldr	r3, [pc, #144]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ecc:	4b21      	ldr	r3, [pc, #132]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <HAL_RCC_OscConfig+0x77c>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002edc:	3a01      	subs	r2, #1
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	4311      	orrs	r1, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ee6:	0212      	lsls	r2, r2, #8
 8002ee8:	4311      	orrs	r1, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002eee:	0852      	lsrs	r2, r2, #1
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	0552      	lsls	r2, r2, #21
 8002ef4:	4311      	orrs	r1, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002efa:	0852      	lsrs	r2, r2, #1
 8002efc:	3a01      	subs	r2, #1
 8002efe:	0652      	lsls	r2, r2, #25
 8002f00:	4311      	orrs	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f06:	06d2      	lsls	r2, r2, #27
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	4912      	ldr	r1, [pc, #72]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f10:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0f      	ldr	r2, [pc, #60]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002f16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a0c      	ldr	r2, [pc, #48]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f28:	f7fd fe80 	bl	8000c2c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fd fe7c 	bl	8000c2c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e058      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f42:	4b04      	ldr	r3, [pc, #16]	@ (8002f54 <HAL_RCC_OscConfig+0x778>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f4e:	e050      	b.n	8002ff2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e04f      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
 8002f54:	40021000 	.word	0x40021000
 8002f58:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5c:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d144      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f68:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a23      	ldr	r2, [pc, #140]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f74:	4b21      	ldr	r3, [pc, #132]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a20      	ldr	r2, [pc, #128]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f80:	f7fd fe54 	bl	8000c2c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fd fe50 	bl	8000c2c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e02c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x7ac>
 8002fa6:	e024      	b.n	8002ff2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d01f      	beq.n	8002fee <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b13      	ldr	r3, [pc, #76]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a12      	ldr	r2, [pc, #72]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002fb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fba:	f7fd fe37 	bl	8000c2c <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fd fe33 	bl	8000c2c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e00f      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	4905      	ldr	r1, [pc, #20]	@ (8002ffc <HAL_RCC_OscConfig+0x820>)
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCC_OscConfig+0x824>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]
 8002fec:	e001      	b.n	8002ff2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	feeefffc 	.word	0xfeeefffc

08003004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0e7      	b.n	80031e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003018:	4b75      	ldr	r3, [pc, #468]	@ (80031f0 <HAL_RCC_ClockConfig+0x1ec>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d910      	bls.n	8003048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b72      	ldr	r3, [pc, #456]	@ (80031f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 0207 	bic.w	r2, r3, #7
 800302e:	4970      	ldr	r1, [pc, #448]	@ (80031f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b6e      	ldr	r3, [pc, #440]	@ (80031f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0cf      	b.n	80031e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d010      	beq.n	8003076 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b66      	ldr	r3, [pc, #408]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003060:	429a      	cmp	r2, r3
 8003062:	d908      	bls.n	8003076 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003064:	4b63      	ldr	r3, [pc, #396]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4960      	ldr	r1, [pc, #384]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04c      	beq.n	800311c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308a:	4b5a      	ldr	r3, [pc, #360]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d121      	bne.n	80030da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0a6      	b.n	80031e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a2:	4b54      	ldr	r3, [pc, #336]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d115      	bne.n	80030da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e09a      	b.n	80031e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ba:	4b4e      	ldr	r3, [pc, #312]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e08e      	b.n	80031e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ca:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e086      	b.n	80031e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030da:	4b46      	ldr	r3, [pc, #280]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4943      	ldr	r1, [pc, #268]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fd fd9e 	bl	8000c2c <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	e00a      	b.n	800310a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7fd fd9a 	bl	8000c2c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e06e      	b.n	80031e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	4b3a      	ldr	r3, [pc, #232]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 020c 	and.w	r2, r3, #12
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	429a      	cmp	r2, r3
 800311a:	d1eb      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d010      	beq.n	800314a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4b31      	ldr	r3, [pc, #196]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003134:	429a      	cmp	r2, r3
 8003136:	d208      	bcs.n	800314a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b2e      	ldr	r3, [pc, #184]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	492b      	ldr	r1, [pc, #172]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314a:	4b29      	ldr	r3, [pc, #164]	@ (80031f0 <HAL_RCC_ClockConfig+0x1ec>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d210      	bcs.n	800317a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003158:	4b25      	ldr	r3, [pc, #148]	@ (80031f0 <HAL_RCC_ClockConfig+0x1ec>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f023 0207 	bic.w	r2, r3, #7
 8003160:	4923      	ldr	r1, [pc, #140]	@ (80031f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	4313      	orrs	r3, r2
 8003166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003168:	4b21      	ldr	r3, [pc, #132]	@ (80031f0 <HAL_RCC_ClockConfig+0x1ec>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d001      	beq.n	800317a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e036      	b.n	80031e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003186:	4b1b      	ldr	r3, [pc, #108]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4918      	ldr	r1, [pc, #96]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a4:	4b13      	ldr	r3, [pc, #76]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4910      	ldr	r1, [pc, #64]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031b8:	f000 f824 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b0d      	ldr	r3, [pc, #52]	@ (80031f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	490b      	ldr	r1, [pc, #44]	@ (80031f8 <HAL_RCC_ClockConfig+0x1f4>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	4a09      	ldr	r2, [pc, #36]	@ (80031fc <HAL_RCC_ClockConfig+0x1f8>)
 80031d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031d8:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <HAL_RCC_ClockConfig+0x1fc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd fcd5 	bl	8000b8c <HAL_InitTick>
 80031e2:	4603      	mov	r3, r0
 80031e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80031e6:	7afb      	ldrb	r3, [r7, #11]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40022000 	.word	0x40022000
 80031f4:	40021000 	.word	0x40021000
 80031f8:	080043d8 	.word	0x080043d8
 80031fc:	20000000 	.word	0x20000000
 8003200:	20000004 	.word	0x20000004

08003204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	@ 0x24
 8003208:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003212:	4b3e      	ldr	r3, [pc, #248]	@ (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800321c:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x34>
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d121      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d11e      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003238:	4b34      	ldr	r3, [pc, #208]	@ (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003244:	4b31      	ldr	r3, [pc, #196]	@ (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 8003246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e005      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003254:	4b2d      	ldr	r3, [pc, #180]	@ (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003260:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003268:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003274:	e00a      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d102      	bne.n	8003282 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800327c:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x110>)
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e004      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d101      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003288:	4b23      	ldr	r3, [pc, #140]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x114>)
 800328a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d134      	bne.n	80032fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003292:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0xa6>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d003      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0xac>
 80032a8:	e005      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ac:	617b      	str	r3, [r7, #20]
      break;
 80032ae:	e005      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032b0:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x114>)
 80032b2:	617b      	str	r3, [r7, #20]
      break;
 80032b4:	e002      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	617b      	str	r3, [r7, #20]
      break;
 80032ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032bc:	4b13      	ldr	r3, [pc, #76]	@ (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	3301      	adds	r3, #1
 80032c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032ca:	4b10      	ldr	r3, [pc, #64]	@ (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	fb03 f202 	mul.w	r2, r3, r2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032e2:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	0e5b      	lsrs	r3, r3, #25
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	3301      	adds	r3, #1
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032fc:	69bb      	ldr	r3, [r7, #24]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	080043f0 	.word	0x080043f0
 8003314:	00f42400 	.word	0x00f42400
 8003318:	007a1200 	.word	0x007a1200

0800331c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b03      	ldr	r3, [pc, #12]	@ (8003330 <HAL_RCC_GetHCLKFreq+0x14>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000000 	.word	0x20000000

08003334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003338:	f7ff fff0 	bl	800331c <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4904      	ldr	r1, [pc, #16]	@ (800335c <HAL_RCC_GetPCLK1Freq+0x28>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	080043e8 	.word	0x080043e8

08003360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003364:	f7ff ffda 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0adb      	lsrs	r3, r3, #11
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4904      	ldr	r1, [pc, #16]	@ (8003388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000
 8003388:	080043e8 	.word	0x080043e8

0800338c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003398:	4b2a      	ldr	r3, [pc, #168]	@ (8003444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033a4:	f7ff f9b6 	bl	8002714 <HAL_PWREx_GetVoltageRange>
 80033a8:	6178      	str	r0, [r7, #20]
 80033aa:	e014      	b.n	80033d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033ac:	4b25      	ldr	r3, [pc, #148]	@ (8003444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b0:	4a24      	ldr	r2, [pc, #144]	@ (8003444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b8:	4b22      	ldr	r3, [pc, #136]	@ (8003444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033c4:	f7ff f9a6 	bl	8002714 <HAL_PWREx_GetVoltageRange>
 80033c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033dc:	d10b      	bne.n	80033f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b80      	cmp	r3, #128	@ 0x80
 80033e2:	d919      	bls.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80033e8:	d902      	bls.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033ea:	2302      	movs	r3, #2
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	e013      	b.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f0:	2301      	movs	r3, #1
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	e010      	b.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b80      	cmp	r3, #128	@ 0x80
 80033fa:	d902      	bls.n	8003402 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033fc:	2303      	movs	r3, #3
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e00a      	b.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b80      	cmp	r3, #128	@ 0x80
 8003406:	d102      	bne.n	800340e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003408:	2302      	movs	r3, #2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	e004      	b.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b70      	cmp	r3, #112	@ 0x70
 8003412:	d101      	bne.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003414:	2301      	movs	r3, #1
 8003416:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003418:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f023 0207 	bic.w	r2, r3, #7
 8003420:	4909      	ldr	r1, [pc, #36]	@ (8003448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003428:	4b07      	ldr	r3, [pc, #28]	@ (8003448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	429a      	cmp	r2, r3
 8003434:	d001      	beq.n	800343a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	40022000 	.word	0x40022000

0800344c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003454:	2300      	movs	r3, #0
 8003456:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003458:	2300      	movs	r3, #0
 800345a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003464:	2b00      	cmp	r3, #0
 8003466:	d031      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003470:	d01a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003472:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003476:	d814      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800347c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003480:	d10f      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003482:	4b5d      	ldr	r3, [pc, #372]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	4a5c      	ldr	r2, [pc, #368]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348e:	e00c      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f9de 	bl	8003858 <RCCEx_PLLSAI1_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a0:	e003      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	74fb      	strb	r3, [r7, #19]
      break;
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80034a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10b      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b0:	4b51      	ldr	r3, [pc, #324]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034be:	494e      	ldr	r1, [pc, #312]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034c6:	e001      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 809e 	beq.w	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034de:	4b46      	ldr	r3, [pc, #280]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f4:	4b40      	ldr	r3, [pc, #256]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	4a3f      	ldr	r2, [pc, #252]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003500:	4b3d      	ldr	r3, [pc, #244]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350c:	2301      	movs	r3, #1
 800350e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003510:	4b3a      	ldr	r3, [pc, #232]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a39      	ldr	r2, [pc, #228]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800351a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800351c:	f7fd fb86 	bl	8000c2c <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003522:	e009      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fd fb82 	bl	8000c2c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d902      	bls.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	74fb      	strb	r3, [r7, #19]
        break;
 8003536:	e005      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003538:	4b30      	ldr	r3, [pc, #192]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0ef      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d15a      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800354a:	4b2b      	ldr	r3, [pc, #172]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003554:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01e      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	429a      	cmp	r2, r3
 8003564:	d019      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003566:	4b24      	ldr	r3, [pc, #144]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003570:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003572:	4b21      	ldr	r3, [pc, #132]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003578:	4a1f      	ldr	r2, [pc, #124]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003582:	4b1d      	ldr	r3, [pc, #116]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003588:	4a1b      	ldr	r2, [pc, #108]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003592:	4a19      	ldr	r2, [pc, #100]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d016      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fd fb42 	bl	8000c2c <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035aa:	e00b      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fd fb3e 	bl	8000c2c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d902      	bls.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	74fb      	strb	r3, [r7, #19]
            break;
 80035c2:	e006      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c4:	4b0c      	ldr	r3, [pc, #48]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0ec      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d8:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e6:	4904      	ldr	r1, [pc, #16]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035ee:	e009      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003604:	7c7b      	ldrb	r3, [r7, #17]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d105      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800360a:	4b8a      	ldr	r3, [pc, #552]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	4a89      	ldr	r2, [pc, #548]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003614:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003622:	4b84      	ldr	r3, [pc, #528]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f023 0203 	bic.w	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4980      	ldr	r1, [pc, #512]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003644:	4b7b      	ldr	r3, [pc, #492]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364a:	f023 020c 	bic.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	4978      	ldr	r1, [pc, #480]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003666:	4b73      	ldr	r3, [pc, #460]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	496f      	ldr	r1, [pc, #444]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003688:	4b6a      	ldr	r3, [pc, #424]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003696:	4967      	ldr	r1, [pc, #412]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036aa:	4b62      	ldr	r3, [pc, #392]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	495e      	ldr	r1, [pc, #376]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036cc:	4b59      	ldr	r3, [pc, #356]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	4956      	ldr	r1, [pc, #344]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ee:	4b51      	ldr	r3, [pc, #324]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	494d      	ldr	r1, [pc, #308]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d028      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003710:	4b48      	ldr	r3, [pc, #288]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	4945      	ldr	r1, [pc, #276]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372e:	d106      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003730:	4b40      	ldr	r3, [pc, #256]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a3f      	ldr	r2, [pc, #252]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800373a:	60d3      	str	r3, [r2, #12]
 800373c:	e011      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003746:	d10c      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	2101      	movs	r1, #1
 800374e:	4618      	mov	r0, r3
 8003750:	f000 f882 	bl	8003858 <RCCEx_PLLSAI1_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d028      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800376e:	4b31      	ldr	r3, [pc, #196]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003774:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377c:	492d      	ldr	r1, [pc, #180]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800378c:	d106      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378e:	4b29      	ldr	r3, [pc, #164]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	4a28      	ldr	r2, [pc, #160]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003794:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003798:	60d3      	str	r3, [r2, #12]
 800379a:	e011      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2101      	movs	r1, #1
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f853 	bl	8003858 <RCCEx_PLLSAI1_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01c      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037cc:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037da:	4916      	ldr	r1, [pc, #88]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037ea:	d10c      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	2102      	movs	r1, #2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f830 	bl	8003858 <RCCEx_PLLSAI1_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003802:	7cfb      	ldrb	r3, [r7, #19]
 8003804:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003812:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003818:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003820:	4904      	ldr	r1, [pc, #16]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003828:	7cbb      	ldrb	r3, [r7, #18]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800383c:	4b05      	ldr	r3, [pc, #20]	@ (8003854 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a04      	ldr	r2, [pc, #16]	@ (8003854 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	6013      	str	r3, [r2, #0]
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000

08003858 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003866:	4b74      	ldr	r3, [pc, #464]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d018      	beq.n	80038a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003872:	4b71      	ldr	r3, [pc, #452]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0203 	and.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d10d      	bne.n	800389e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
       ||
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800388a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
       ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d047      	beq.n	800392e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
 80038a2:	e044      	b.n	800392e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d018      	beq.n	80038de <RCCEx_PLLSAI1_Config+0x86>
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d825      	bhi.n	80038fc <RCCEx_PLLSAI1_Config+0xa4>
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d002      	beq.n	80038ba <RCCEx_PLLSAI1_Config+0x62>
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d009      	beq.n	80038cc <RCCEx_PLLSAI1_Config+0x74>
 80038b8:	e020      	b.n	80038fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11d      	bne.n	8003902 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ca:	e01a      	b.n	8003902 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038dc:	e013      	b.n	8003906 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038de:	4b56      	ldr	r3, [pc, #344]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ea:	4b53      	ldr	r3, [pc, #332]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038fa:	e006      	b.n	800390a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e004      	b.n	800390c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800390a:	bf00      	nop
    }

    if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003912:	4b49      	ldr	r3, [pc, #292]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	430b      	orrs	r3, r1
 8003928:	4943      	ldr	r1, [pc, #268]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800392a:	4313      	orrs	r3, r2
 800392c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d17c      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003934:	4b40      	ldr	r3, [pc, #256]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a3f      	ldr	r2, [pc, #252]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800393a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800393e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fd f974 	bl	8000c2c <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003946:	e009      	b.n	800395c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003948:	f7fd f970 	bl	8000c2c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d902      	bls.n	800395c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	73fb      	strb	r3, [r7, #15]
        break;
 800395a:	e005      	b.n	8003968 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800395c:	4b36      	ldr	r3, [pc, #216]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ef      	bne.n	8003948 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d15f      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d110      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003974:	4b30      	ldr	r3, [pc, #192]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800397c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6892      	ldr	r2, [r2, #8]
 8003984:	0211      	lsls	r1, r2, #8
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	06d2      	lsls	r2, r2, #27
 800398c:	430a      	orrs	r2, r1
 800398e:	492a      	ldr	r1, [pc, #168]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003990:	4313      	orrs	r3, r2
 8003992:	610b      	str	r3, [r1, #16]
 8003994:	e027      	b.n	80039e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d112      	bne.n	80039c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800399c:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	0211      	lsls	r1, r2, #8
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6912      	ldr	r2, [r2, #16]
 80039b2:	0852      	lsrs	r2, r2, #1
 80039b4:	3a01      	subs	r2, #1
 80039b6:	0552      	lsls	r2, r2, #21
 80039b8:	430a      	orrs	r2, r1
 80039ba:	491f      	ldr	r1, [pc, #124]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	610b      	str	r3, [r1, #16]
 80039c0:	e011      	b.n	80039e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6892      	ldr	r2, [r2, #8]
 80039d2:	0211      	lsls	r1, r2, #8
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6952      	ldr	r2, [r2, #20]
 80039d8:	0852      	lsrs	r2, r2, #1
 80039da:	3a01      	subs	r2, #1
 80039dc:	0652      	lsls	r2, r2, #25
 80039de:	430a      	orrs	r2, r1
 80039e0:	4915      	ldr	r1, [pc, #84]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039e6:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a13      	ldr	r2, [pc, #76]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f2:	f7fd f91b 	bl	8000c2c <HAL_GetTick>
 80039f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039f8:	e009      	b.n	8003a0e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039fa:	f7fd f917 	bl	8000c2c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d902      	bls.n	8003a0e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	73fb      	strb	r3, [r7, #15]
          break;
 8003a0c:	e005      	b.n	8003a1a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ef      	beq.n	80039fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	4903      	ldr	r1, [pc, #12]	@ (8003a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e040      	b.n	8003ad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fc ffe8 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2224      	movs	r2, #36	@ 0x24
 8003a68:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fa54 	bl	8003f30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f825 	bl	8003ad8 <UART_SetConfig>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e01b      	b.n	8003ad0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fad3 	bl	8004074 <UART_CheckIdleState>
 8003ace:	4603      	mov	r3, r0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003adc:	b08a      	sub	sp, #40	@ 0x28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4bb4      	ldr	r3, [pc, #720]	@ (8003dd8 <UART_SetConfig+0x300>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4aa9      	ldr	r2, [pc, #676]	@ (8003ddc <UART_SetConfig+0x304>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b40:	4313      	orrs	r3, r2
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4aa0      	ldr	r2, [pc, #640]	@ (8003de0 <UART_SetConfig+0x308>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d126      	bne.n	8003bb0 <UART_SetConfig+0xd8>
 8003b62:	4ba0      	ldr	r3, [pc, #640]	@ (8003de4 <UART_SetConfig+0x30c>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d81b      	bhi.n	8003ba8 <UART_SetConfig+0xd0>
 8003b70:	a201      	add	r2, pc, #4	@ (adr r2, 8003b78 <UART_SetConfig+0xa0>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b89 	.word	0x08003b89
 8003b7c:	08003b99 	.word	0x08003b99
 8003b80:	08003b91 	.word	0x08003b91
 8003b84:	08003ba1 	.word	0x08003ba1
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8e:	e080      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003b90:	2302      	movs	r3, #2
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b96:	e07c      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9e:	e078      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba6:	e074      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bae:	e070      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a8c      	ldr	r2, [pc, #560]	@ (8003de8 <UART_SetConfig+0x310>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d138      	bne.n	8003c2c <UART_SetConfig+0x154>
 8003bba:	4b8a      	ldr	r3, [pc, #552]	@ (8003de4 <UART_SetConfig+0x30c>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	d82d      	bhi.n	8003c24 <UART_SetConfig+0x14c>
 8003bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <UART_SetConfig+0xf8>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003c05 	.word	0x08003c05
 8003bd4:	08003c25 	.word	0x08003c25
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003c25 	.word	0x08003c25
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c25 	.word	0x08003c25
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c0d 	.word	0x08003c0d
 8003bf4:	08003c25 	.word	0x08003c25
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003c1d 	.word	0x08003c1d
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0a:	e042      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c12:	e03e      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c14:	2304      	movs	r3, #4
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1a:	e03a      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c22:	e036      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2a:	e032      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6a      	ldr	r2, [pc, #424]	@ (8003ddc <UART_SetConfig+0x304>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d12a      	bne.n	8003c8c <UART_SetConfig+0x1b4>
 8003c36:	4b6b      	ldr	r3, [pc, #428]	@ (8003de4 <UART_SetConfig+0x30c>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c44:	d01a      	beq.n	8003c7c <UART_SetConfig+0x1a4>
 8003c46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c4a:	d81b      	bhi.n	8003c84 <UART_SetConfig+0x1ac>
 8003c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c50:	d00c      	beq.n	8003c6c <UART_SetConfig+0x194>
 8003c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c56:	d815      	bhi.n	8003c84 <UART_SetConfig+0x1ac>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <UART_SetConfig+0x18c>
 8003c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c60:	d008      	beq.n	8003c74 <UART_SetConfig+0x19c>
 8003c62:	e00f      	b.n	8003c84 <UART_SetConfig+0x1ac>
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6a:	e012      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c72:	e00e      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c74:	2304      	movs	r3, #4
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7a:	e00a      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c82:	e006      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c84:	2310      	movs	r3, #16
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8a:	e002      	b.n	8003c92 <UART_SetConfig+0x1ba>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a51      	ldr	r2, [pc, #324]	@ (8003ddc <UART_SetConfig+0x304>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d17a      	bne.n	8003d92 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d824      	bhi.n	8003cee <UART_SetConfig+0x216>
 8003ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <UART_SetConfig+0x1d4>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cef 	.word	0x08003cef
 8003cb4:	08003cd9 	.word	0x08003cd9
 8003cb8:	08003cef 	.word	0x08003cef
 8003cbc:	08003cdf 	.word	0x08003cdf
 8003cc0:	08003cef 	.word	0x08003cef
 8003cc4:	08003cef 	.word	0x08003cef
 8003cc8:	08003cef 	.word	0x08003cef
 8003ccc:	08003ce7 	.word	0x08003ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7ff fb30 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	61f8      	str	r0, [r7, #28]
        break;
 8003cd6:	e010      	b.n	8003cfa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd8:	4b44      	ldr	r3, [pc, #272]	@ (8003dec <UART_SetConfig+0x314>)
 8003cda:	61fb      	str	r3, [r7, #28]
        break;
 8003cdc:	e00d      	b.n	8003cfa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cde:	f7ff fa91 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8003ce2:	61f8      	str	r0, [r7, #28]
        break;
 8003ce4:	e009      	b.n	8003cfa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cea:	61fb      	str	r3, [r7, #28]
        break;
 8003cec:	e005      	b.n	8003cfa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8107 	beq.w	8003f10 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d305      	bcc.n	8003d1e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d903      	bls.n	8003d26 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d24:	e0f4      	b.n	8003f10 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	461c      	mov	r4, r3
 8003d2c:	4615      	mov	r5, r2
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	022b      	lsls	r3, r5, #8
 8003d38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d3c:	0222      	lsls	r2, r4, #8
 8003d3e:	68f9      	ldr	r1, [r7, #12]
 8003d40:	6849      	ldr	r1, [r1, #4]
 8003d42:	0849      	lsrs	r1, r1, #1
 8003d44:	2000      	movs	r0, #0
 8003d46:	4688      	mov	r8, r1
 8003d48:	4681      	mov	r9, r0
 8003d4a:	eb12 0a08 	adds.w	sl, r2, r8
 8003d4e:	eb43 0b09 	adc.w	fp, r3, r9
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d60:	4650      	mov	r0, sl
 8003d62:	4659      	mov	r1, fp
 8003d64:	f7fc fa32 	bl	80001cc <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d76:	d308      	bcc.n	8003d8a <UART_SetConfig+0x2b2>
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d7e:	d204      	bcs.n	8003d8a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e0c2      	b.n	8003f10 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d90:	e0be      	b.n	8003f10 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d9a:	d16a      	bne.n	8003e72 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d834      	bhi.n	8003e0e <UART_SetConfig+0x336>
 8003da4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <UART_SetConfig+0x2d4>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003df1 	.word	0x08003df1
 8003db4:	08003df9 	.word	0x08003df9
 8003db8:	08003e0f 	.word	0x08003e0f
 8003dbc:	08003dff 	.word	0x08003dff
 8003dc0:	08003e0f 	.word	0x08003e0f
 8003dc4:	08003e0f 	.word	0x08003e0f
 8003dc8:	08003e0f 	.word	0x08003e0f
 8003dcc:	08003e07 	.word	0x08003e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd0:	f7ff fab0 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8003dd4:	61f8      	str	r0, [r7, #28]
        break;
 8003dd6:	e020      	b.n	8003e1a <UART_SetConfig+0x342>
 8003dd8:	efff69f3 	.word	0xefff69f3
 8003ddc:	40008000 	.word	0x40008000
 8003de0:	40013800 	.word	0x40013800
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40004400 	.word	0x40004400
 8003dec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df0:	f7ff fab6 	bl	8003360 <HAL_RCC_GetPCLK2Freq>
 8003df4:	61f8      	str	r0, [r7, #28]
        break;
 8003df6:	e010      	b.n	8003e1a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df8:	4b4c      	ldr	r3, [pc, #304]	@ (8003f2c <UART_SetConfig+0x454>)
 8003dfa:	61fb      	str	r3, [r7, #28]
        break;
 8003dfc:	e00d      	b.n	8003e1a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfe:	f7ff fa01 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8003e02:	61f8      	str	r0, [r7, #28]
        break;
 8003e04:	e009      	b.n	8003e1a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e0a:	61fb      	str	r3, [r7, #28]
        break;
 8003e0c:	e005      	b.n	8003e1a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d077      	beq.n	8003f10 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005a      	lsls	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	441a      	add	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b0f      	cmp	r3, #15
 8003e3a:	d916      	bls.n	8003e6a <UART_SetConfig+0x392>
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e42:	d212      	bcs.n	8003e6a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f023 030f 	bic.w	r3, r3, #15
 8003e4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	8afb      	ldrh	r3, [r7, #22]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	8afa      	ldrh	r2, [r7, #22]
 8003e66:	60da      	str	r2, [r3, #12]
 8003e68:	e052      	b.n	8003f10 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e70:	e04e      	b.n	8003f10 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d827      	bhi.n	8003eca <UART_SetConfig+0x3f2>
 8003e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e80 <UART_SetConfig+0x3a8>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ead 	.word	0x08003ead
 8003e88:	08003eb5 	.word	0x08003eb5
 8003e8c:	08003ecb 	.word	0x08003ecb
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ecb 	.word	0x08003ecb
 8003e98:	08003ecb 	.word	0x08003ecb
 8003e9c:	08003ecb 	.word	0x08003ecb
 8003ea0:	08003ec3 	.word	0x08003ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7ff fa46 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8003ea8:	61f8      	str	r0, [r7, #28]
        break;
 8003eaa:	e014      	b.n	8003ed6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eac:	f7ff fa58 	bl	8003360 <HAL_RCC_GetPCLK2Freq>
 8003eb0:	61f8      	str	r0, [r7, #28]
        break;
 8003eb2:	e010      	b.n	8003ed6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <UART_SetConfig+0x454>)
 8003eb6:	61fb      	str	r3, [r7, #28]
        break;
 8003eb8:	e00d      	b.n	8003ed6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eba:	f7ff f9a3 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8003ebe:	61f8      	str	r0, [r7, #28]
        break;
 8003ec0:	e009      	b.n	8003ed6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ec6:	61fb      	str	r3, [r7, #28]
        break;
 8003ec8:	e005      	b.n	8003ed6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d019      	beq.n	8003f10 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	085a      	lsrs	r2, r3, #1
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b0f      	cmp	r3, #15
 8003ef4:	d909      	bls.n	8003f0a <UART_SetConfig+0x432>
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003efc:	d205      	bcs.n	8003f0a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60da      	str	r2, [r3, #12]
 8003f08:	e002      	b.n	8003f10 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3728      	adds	r7, #40	@ 0x28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2a:	bf00      	nop
 8003f2c:	00f42400 	.word	0x00f42400

08003f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01a      	beq.n	8004046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800402e:	d10a      	bne.n	8004046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	605a      	str	r2, [r3, #4]
  }
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b098      	sub	sp, #96	@ 0x60
 8004078:	af02      	add	r7, sp, #8
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004084:	f7fc fdd2 	bl	8000c2c <HAL_GetTick>
 8004088:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b08      	cmp	r3, #8
 8004096:	d12e      	bne.n	80040f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004098:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a0:	2200      	movs	r2, #0
 80040a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f88c 	bl	80041c4 <UART_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d021      	beq.n	80040f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e6      	bne.n	80040b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e062      	b.n	80041bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b04      	cmp	r3, #4
 8004102:	d149      	bne.n	8004198 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f856 	bl	80041c4 <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d03c      	beq.n	8004198 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	623b      	str	r3, [r7, #32]
   return(result);
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800413c:	633b      	str	r3, [r7, #48]	@ 0x30
 800413e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800414a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e6      	bne.n	800411e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3308      	adds	r3, #8
 8004156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3308      	adds	r3, #8
 800416e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004170:	61fa      	str	r2, [r7, #28]
 8004172:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	69b9      	ldr	r1, [r7, #24]
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	617b      	str	r3, [r7, #20]
   return(result);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e5      	bne.n	8004150 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e011      	b.n	80041bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3758      	adds	r7, #88	@ 0x58
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d4:	e04f      	b.n	8004276 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d04b      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041de:	f7fc fd25 	bl	8000c2c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d302      	bcc.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e04e      	b.n	8004296 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d037      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b80      	cmp	r3, #128	@ 0x80
 800420a:	d034      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0xb2>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b40      	cmp	r3, #64	@ 0x40
 8004210:	d031      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d110      	bne.n	8004242 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2208      	movs	r2, #8
 8004226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f838 	bl	800429e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2208      	movs	r2, #8
 8004232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e029      	b.n	8004296 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004250:	d111      	bne.n	8004276 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800425a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f81e 	bl	800429e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e00f      	b.n	8004296 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	429a      	cmp	r2, r3
 8004292:	d0a0      	beq.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800429e:	b480      	push	{r7}
 80042a0:	b095      	sub	sp, #84	@ 0x54
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80042c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e6      	bne.n	80042a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3308      	adds	r3, #8
 80042de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3308      	adds	r3, #8
 80042f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e5      	bne.n	80042d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	2b01      	cmp	r3, #1
 8004312:	d118      	bne.n	8004346 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	60bb      	str	r3, [r7, #8]
   return(result);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f023 0310 	bic.w	r3, r3, #16
 8004328:	647b      	str	r3, [r7, #68]	@ 0x44
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6979      	ldr	r1, [r7, #20]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	613b      	str	r3, [r7, #16]
   return(result);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e6      	bne.n	8004314 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800435a:	bf00      	nop
 800435c:	3754      	adds	r7, #84	@ 0x54
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <memset>:
 8004366:	4402      	add	r2, r0
 8004368:	4603      	mov	r3, r0
 800436a:	4293      	cmp	r3, r2
 800436c:	d100      	bne.n	8004370 <memset+0xa>
 800436e:	4770      	bx	lr
 8004370:	f803 1b01 	strb.w	r1, [r3], #1
 8004374:	e7f9      	b.n	800436a <memset+0x4>
	...

08004378 <__libc_init_array>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4d0d      	ldr	r5, [pc, #52]	@ (80043b0 <__libc_init_array+0x38>)
 800437c:	4c0d      	ldr	r4, [pc, #52]	@ (80043b4 <__libc_init_array+0x3c>)
 800437e:	1b64      	subs	r4, r4, r5
 8004380:	10a4      	asrs	r4, r4, #2
 8004382:	2600      	movs	r6, #0
 8004384:	42a6      	cmp	r6, r4
 8004386:	d109      	bne.n	800439c <__libc_init_array+0x24>
 8004388:	4d0b      	ldr	r5, [pc, #44]	@ (80043b8 <__libc_init_array+0x40>)
 800438a:	4c0c      	ldr	r4, [pc, #48]	@ (80043bc <__libc_init_array+0x44>)
 800438c:	f000 f818 	bl	80043c0 <_init>
 8004390:	1b64      	subs	r4, r4, r5
 8004392:	10a4      	asrs	r4, r4, #2
 8004394:	2600      	movs	r6, #0
 8004396:	42a6      	cmp	r6, r4
 8004398:	d105      	bne.n	80043a6 <__libc_init_array+0x2e>
 800439a:	bd70      	pop	{r4, r5, r6, pc}
 800439c:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a0:	4798      	blx	r3
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7ee      	b.n	8004384 <__libc_init_array+0xc>
 80043a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043aa:	4798      	blx	r3
 80043ac:	3601      	adds	r6, #1
 80043ae:	e7f2      	b.n	8004396 <__libc_init_array+0x1e>
 80043b0:	08004428 	.word	0x08004428
 80043b4:	08004428 	.word	0x08004428
 80043b8:	08004428 	.word	0x08004428
 80043bc:	0800442c 	.word	0x0800442c

080043c0 <_init>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr

080043cc <_fini>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr
